@model IEnumerable<MapProject.Models.LocationViewModel>
@{
    ViewBag.Title = "Index";
}
<div id="top">
    <div id="row" class="row">
        <div id="right-panel" class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
            <div class="textpadding">
                <div class="row">
                    <input id="search" type="text" autocomplete="on" value="" class="col-xs-9 col-sm-9 col-md-9 col-lg-9" />
                    <input type="submit" id="submit" value="Calculate" class="btn btn-primary col-xs-3 col-sm-3 col-md-3 col-lg-3">
                </div>
                <div id="saving" class="row">
                    <span id="SaveText">Save your chosen Itinerary</span>
                    <input type="submit" id="Save" class="btn btn-success" />
                </div>
            </div>
            <div id="directions-panel" class="textpadding"></div>
            <ul id="locationlist">
                @foreach (var item in Model)
                {
                    if (Model.First() == item)
                    { }
                    else
                    {
                        <hr>
                    }

                    <li class="listItem row">
                        @*<input type="checkbox" class="checkbox" id="_checkbox_btn" value="@Html.DisplayFor(modelItem => item.Latitude),@Html.DisplayFor(modelItem => item.Longitude)" />*@
                        
                        @*<img id="thumbimg" class="img-thumbnail col-xs-5 col-sm-5 col-md-5 col-lg-5" src="@Html.DisplayFor(modelItem => item.Picture)">*@
                        <img id="locationpic" class="img-thumbnail col-xs-5 col-sm-5 col-md-5 col-lg-5" src="data:image;base64,@System.Convert.ToBase64String(item.Picture)" />
                        <div id="text" class="col-xs-5 col-sm-5 col-md-5 col-lg-5">
                            <text class="nameText">@Html.DisplayFor(modelItem => item.Name)</text><br>
                            @Html.DisplayFor(modelItem => item.Latitude)<br>
                            @Html.DisplayFor(modelItem => item.Longitude)<br>
                            @Html.DisplayFor(modelItem => item.Time)<text> Mins</text><br>
                            
                        </div>
                        <div id="checkbox" class="col-xs-1 col-sm-1 col-md-1 col-lg-1">
                            <input type="checkbox" class="checkbox" id="_checkbox_btn" value="@Html.DisplayFor(modelItem => item.Latitude),@Html.DisplayFor(modelItem => item.Longitude)" />
                            @Html.HiddenFor(modelItem => item.Id, htmlAttributes: new { id = "LocationID" })
                        </div>
                        <div id="desc">
                            @Html.DisplayFor(modelItem => item.Description)
                        </div>
                        <br><br />
                    </li>
                }
            </ul>
        </div>
        <div id="map" class="col-xs-9 col-sm-9 col-md-9 col-lg-9"></div>
        <div id="infowindow-content">
            <img src="" width="16" height="16" id="place-icon">
            <span id="place-name" class="title"></span><br>
            <span id="place-address"></span>
        </div>
    </div>
    <span id="seltext">Curiated Package Selections</span>
    <div id="row2" class="row">
        <div id="PlannedTrips">
            @Html.Action("_PlannedTrips")
        </div>
    </div>
</div>
    <script>

        var GlobalVars = {};

        function initMap() {
            var directionsService = new google.maps.DirectionsService;
            var directionsDisplay = new google.maps.DirectionsRenderer;
            var map = new google.maps.Map(document.getElementById('map'), {
                zoom: 14,
                center: { lat: 54.27, lng: -8.47 }
            });
            directionsDisplay.setMap(map);

            document.getElementById('submit').addEventListener('click', function () {
                $("#saving").css("visibility","visible");
                calculateAndDisplayRoute(directionsService, directionsDisplay);
            });

            document.getElementById('submit').addEventListener('click', function () {
                //calculateAndDisplayRoute(directionsService, directionsDisplay);
            });

            google.maps.event.addListener(map, 'click', function (event) {
                var lat = event.latLng.lat();
                var long = event.latLng.lng();
                //alert('Lat: ' + lat + ' and Longitude is: ' + long);
            });

            var input = document.getElementById('search');
            var autocomplete = new google.maps.places.Autocomplete(input);

            // Bind the map's bounds (viewport) property to the autocomplete object,
            // so that the autocomplete requests use the current map bounds for the
            // bounds option in the request.
            autocomplete.bindTo('bounds', map);

            var infowindow = new google.maps.InfoWindow();
            var infowindowContent = document.getElementById('infowindow-content');
            infowindow.setContent(infowindowContent);
            var marker = new google.maps.Marker({
                map: map,
                anchorPoint: new google.maps.Point(0, -29)
            });

            autocomplete.addListener('place_changed', function () {
                infowindow.close();
                marker.setVisible(false);
                var place = autocomplete.getPlace();
                if (!place.geometry) {
                    // User entered the name of a Place that was not suggested and
                    // pressed the Enter key, or the Place Details request failed.
                    window.alert("No details available for input: '" + place.name + "'");
                    return;
                }

                var lat = place.geometry.location.lat().toFixed(7);
                var long = place.geometry.location.lng().toFixed(7);

                //input.value = lat + ',' + long;

                GlobalVars.coords = lat + ',' + long;

                // If the place has a geometry, then present it on a map.
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);  // Why 17? Because it looks good.
                }
                marker.setPosition(place.geometry.location);
                marker.setVisible(true);

                var address = '';
                if (place.address_components) {
                    address = [
                      (place.address_components[0] && place.address_components[0].short_name || ''),
                      (place.address_components[1] && place.address_components[1].short_name || ''),
                      (place.address_components[2] && place.address_components[2].short_name || '')
                    ].join(' ');
                }

                infowindowContent.children['place-icon'].src = place.icon;
                infowindowContent.children['place-name'].textContent = place.name;
                infowindowContent.children['place-address'].textContent = address;
                infowindow.open(map, marker);
            });
        }

        function calculateAndDisplayRoute(directionsService, directionsDisplay) {
            var waypts = [];
            var checkboxArray = document.getElementsByClassName('checkbox');
            for (var i = 0; i < checkboxArray.length; i++) {
                if (checkboxArray[i].checked) {
                    waypts.push({
                        location: checkboxArray[i].value,
                        stopover: true
                    });
                }
            }

            directionsService.route({
                origin: GlobalVars.coords,
                destination: GlobalVars.coords,
                waypoints: waypts,
                optimizeWaypoints: true,
                travelMode: 'DRIVING'
            }, function (response, status) {
                if (status === 'OK') {
                    directionsDisplay.setDirections(response);
                    var route = response.routes[0];
                    var summaryPanel = document.getElementById('directions-panel');
                    summaryPanel.innerHTML = '';
                    // For each route, display summary information.
                    for (var i = 0; i < route.legs.length; i++) {
                        var routeSegment = i + 1;
                        summaryPanel.innerHTML += '<b>Itinerary Stop: ' + routeSegment +
                            '</b><br>';
                        summaryPanel.innerHTML += route.legs[i].start_address + '<br>to<br>';
                        summaryPanel.innerHTML += route.legs[i].end_address + '<br>';
                        summaryPanel.innerHTML += route.legs[i].distance.text + '<br>';
                        summaryPanel.innerHTML += route.legs[i].duration.text + '<br><br>';
                    }
                } else {
                    window.alert('Directions request failed due to ' + status);
                }
            });
        }


        $(document).ready(function () {
            //$(".container.body-content").css("min-width", "1300px");
            $(".nameText").click(function () {

                var test = $(this).parent().parent()[0].children[3];
                $text = $(test).attr('id');
                //$(test).fadeIn("slow").css("display", "inline-block");
                if ($(test).css('display') == 'none') {
                    $(test).fadeIn("slow").css("display", "inline-block");
                } else {
                    $(test).fadeOut("slow");
                }
            });

            $("#Save").click(function (e) {
                e.preventDefault();
                var Locations = [];
                var checkboxArray = $(".checkbox");
                for (var i = 0; i < checkboxArray.length; i++) {
                    if (checkboxArray[i].checked) {
                        var test2 = checkboxArray[i].value;
                        Locations.push($("#_checkbox_btn[value='" + checkboxArray[i].value + "']").siblings()[0].value);
                        //waypts.push($(this).;
                    }
                }

                $.post("@Url.Action("SaveItinerary", "Map")", { id: "@ViewBag.UserId", list: Locations }, function (data) {
                    //, list: Locations 
                    alert(data);

                    toastr.options = {
                        "closeButton": false,
                        "debug": false,
                        "newestOnTop": false,
                        "progressBar": false,
                        "positionClass": "toast-top-right",
                        "preventDuplicates": false,
                        "onclick": null,
                        "showDuration": "300",
                        "hideDuration": "1000",
                        "timeOut": "5000",
                        "extendedTimeOut": "1000",
                        "showEasing": "swing",
                        "hideEasing": "linear",
                        "showMethod": "fadeIn",
                        "hideMethod": "fadeOut"
                    }
                    if (data == 1) {
                        toastr["success"]("Your Saved Itinerary Has Been Updated")
                    }
                    else if (data == 2) {
                        toastr["success"]("You Have Saved An Itinerary")
                    }
                    else{
                        toastr["error"]("Error has occured!")
                    }

                    

                    

                });

            });

            $("footer").hide();
        });
    </script>


    @*<script>
              function initMap() {
                var bounds = new google.maps.LatLngBounds;
                var markersArray = [];

                var origin1 = {lat: 55.93, lng: -3.118};
                var destinationA = 'Stockholm, Sweden';
                var destinationB = 'Sligo, Ireland';
                var destinationC = 'Dublin, Ireland';
                var destinationD = 'London, UK';
                var destinationE = 'Cork, Ireland';

                var destinationIcon = 'https://chart.googleapis.com/chart?' +
                    'chst=d_map_pin_letter&chld=D|FF0000|000000';
                var originIcon = 'https://chart.googleapis.com/chart?' +
                    'chst=d_map_pin_letter&chld=O|FFFF00|000000';
                var map = new google.maps.Map(document.getElementById('map'), {
                  center: {lat: 55.53, lng: 9.4},
                  zoom: 10
                });
                var geocoder = new google.maps.Geocoder;

                var service = new google.maps.DistanceMatrixService;
                service.getDistanceMatrix({
                  origins: [origin1],
                  destinations: [destinationA, destinationB, destinationC, destinationD, destinationE],
                  travelMode: 'DRIVING',
                  unitSystem: google.maps.UnitSystem.METRIC,
                  avoidHighways: false,
                  avoidTolls: false
                }, function(response, status) {
                  if (status !== 'OK') {
                    alert('Error was: ' + status);
                  } else {
                    var originList = response.originAddresses;
                    var destinationList = response.destinationAddresses;
                    var outputDiv = document.getElementById('output');
                    outputDiv.innerHTML = '';
                    deleteMarkers(markersArray);

                    var showGeocodedAddressOnMap = function(asDestination) {
                      var icon = asDestination ? destinationIcon : originIcon;
                      return function(results, status) {
                        if (status === 'OK') {
                          map.fitBounds(bounds.extend(results[0].geometry.location));
                          markersArray.push(new google.maps.Marker({
                            map: map,
                            position: results[0].geometry.location,
                            icon: icon
                          }));
                        } else {
                          alert('Geocode was not successful due to: ' + status);
                        }
                      };
                    };

                    for (var i = 0; i < originList.length; i++) {
                      var results = response.rows[i].elements;
                      geocoder.geocode({'address': originList[i]},
                          showGeocodedAddressOnMap(false));
                      for (var j = 0; j < results.length; j++) {
                        geocoder.geocode({'address': destinationList[j]},
                            showGeocodedAddressOnMap(true));
                        outputDiv.innerHTML += originList[i] + ' to ' + destinationList[j] + ': ' + results[j].distance.text + ' in ' + results[j].duration.text + '<br>';
                      }
                    }
                  }
                });
              }

              function deleteMarkers(markersArray) {
                for (var i = 0; i < markersArray.length; i++) {
                  markersArray[i].setMap(null);
                }
                markersArray = [];
              }
        </script>*@
    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBw_b25ZsVxp4GvOal3ImsezOFWLU-PMyw&libraries=places&callback=initMap">
    </script>
